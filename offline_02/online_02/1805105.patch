diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..81ab260
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "user.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 62fd0f8..25d8fc5 100644
--- a/Makefile
+++ b/Makefile
@@ -133,6 +133,8 @@ UPROGS=\
 	$U/_ls\
 	$U/_mkdir\
 	$U/_rm\
+	$U/_sample\
+	$U/_seed\
 	$U/_sh\
 	$U/_stressfs\
 	$U/_usertests\
diff --git a/kernel/array.h b/kernel/array.h
new file mode 100644
index 0000000..ac5bfc1
--- /dev/null
+++ b/kernel/array.h
@@ -0,0 +1,4 @@
+struct array{
+    int len;
+    int array[15];
+};
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..2c55927 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_setSeed(void);
+extern uint64 sys_sample(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_setSeed] sys_setSeed,
+[SYS_sample]  sys_sample,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..78a60c8 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_setSeed 22
+#define SYS_sample 23 
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..0ac5cd4 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "array.h"
 
 uint64
 sys_exit(void)
@@ -91,3 +92,37 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int seed = 0;
+
+// setSeed
+uint64
+sys_setSeed(void)
+{
+  argint(0, &seed);
+  printf("set to %d\n", seed);
+  return 1;
+}
+
+int k = 0;
+
+// sample
+uint64
+sys_sample(void)
+{
+  uint64 addr;
+  argaddr(0, &addr);
+  argint(1, &k);
+
+  struct array a;
+  copyin(myproc()->pagetable, (char*)&a, addr, sizeof(a));
+
+  for(int i=0;i<k;i++){
+    seed = seed + 1;
+    a.array[i] = a.array[seed%a.len];
+  }
+
+  copyout(myproc()->pagetable, addr, (char*)&a, sizeof(a));
+
+  return 0;
+}
diff --git a/user/sample.c b/user/sample.c
new file mode 100644
index 0000000..d6655f5
--- /dev/null
+++ b/user/sample.c
@@ -0,0 +1,37 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+struct array{
+    int len;
+    int array[15];
+};
+
+int main(int argc, char* argv[]){
+    if(argc < 4){
+        printf("Usage: ./sample <k> <len> <item1> <item2> ... <itemN>\n");
+        exit(1);
+    }
+    int k = atoi(argv[1]);
+
+    struct array* aO = malloc(sizeof(struct array));
+    aO->len = atoi(argv[2]);
+    for(int i=3;i<argc;i++){
+        int item = atoi(argv[i]);
+        aO->array[i-3] = item;
+    }
+
+    sample(aO, k);
+
+    printf("Sampled elements are [");
+    for(int i=0;i<k;i++){
+        printf("%d", aO->array[i]);
+        if(i != k-1){
+            printf(", ");
+        }
+    }
+    printf("]\n");
+
+    free(aO);
+    return 0;
+}
\ No newline at end of file
diff --git a/user/seed.c b/user/seed.c
new file mode 100644
index 0000000..4704f48
--- /dev/null
+++ b/user/seed.c
@@ -0,0 +1,13 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char* argv[]){
+    
+    int seed = atoi(argv[1]);
+    
+    if(setSeed(seed) < 0){
+        printf("setSeed syscall error\n");
+    }
+    return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..64d9a14 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct array;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int setSeed(int);
+int sample(struct array*, int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..1d0685e 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("setSeed");
+entry("sample");

diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..0d003da
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,7 @@
+{
+    "files.associations": {
+        "proc.h": "c",
+        "stat.h": "c",
+        "param.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 62fd0f8..918770f 100644
--- a/Makefile
+++ b/Makefile
@@ -130,11 +130,13 @@ UPROGS=\
 	$U/_init\
 	$U/_kill\
 	$U/_ln\
+	$U/_load\
 	$U/_ls\
 	$U/_mkdir\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_trace\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..7200631 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct procInfo;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             trace(int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..2f9d0eb 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "procInfo.h"
 
 struct cpu cpus[NCPU];
 
@@ -169,6 +170,7 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->trace_syscall = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -322,6 +324,8 @@ fork(void)
   np->state = RUNNABLE;
   release(&np->lock);
 
+  np->trace_syscall = 0;
+
   return pid;
 }
 
@@ -686,3 +690,19 @@ procdump(void)
     printf("\n");
   }
 }
+
+extern int get_num_of_syscalls(void);
+
+// trace system call
+int
+trace(int syscall_num)
+{
+  if((syscall_num<1) || (syscall_num>=get_num_of_syscalls()))
+  {
+    printf("invalid syscall id\n");
+    return -1;
+  }
+  struct proc *p = myproc();
+  p->trace_syscall = syscall_num;
+  return 0;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..4e324c4 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int trace_syscall;           // syscall to be traced
 };
diff --git a/kernel/procInfo.h b/kernel/procInfo.h
new file mode 100644
index 0000000..7fe30dc
--- /dev/null
+++ b/kernel/procInfo.h
@@ -0,0 +1,6 @@
+struct procInfo {
+    int activeProcess;
+    int totalProcess;
+    int memSize;
+    int totalMemSize;
+};
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..259fed5 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_info(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,42 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_info]    sys_info,
+};
+
+// functions and variables for task 1
+int
+get_num_of_syscalls(void)
+{
+  return NELEM(syscalls);
+}
+
+// syscall names array
+char* syscall_names[] = {
+  "fork",
+  "exit",
+  "wait",
+  "pipe",
+  "read",
+  "kill",
+  "exec",
+  "fstat",
+  "chdir",
+  "dup",
+  "getpid",
+  "sbrk",
+  "sleep",
+  "uptime",
+  "open",
+  "write",
+  "mknod",
+  "unlink",
+  "link",
+  "mkdir",
+  "close",
+  "trace",
+  "info"
 };
 
 void
@@ -139,6 +177,14 @@ syscall(void)
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    int ret_val = p->trapframe->a0;
+
+    if(p->trace_syscall == num)
+    {
+      printf("pid: %d, syscall: %s, args: (", p->pid, syscall_names[num-1]);
+      // print the arguments not done
+      printf("), return: %d\n", ret_val);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..f11b0ee 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_info   23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..de28623 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "procInfo.h"
 
 uint64
 sys_exit(void)
@@ -91,3 +92,46 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// trace system call
+uint64
+sys_trace(void)
+{
+  int syscall_num;
+  argint(0, &syscall_num);
+  return trace(syscall_num);
+}
+
+// info system call
+extern struct proc proc[NPROC];
+
+uint64
+sys_info(void)
+{
+  uint64 addr;
+  argaddr(0, &addr);
+
+  struct procInfo pI;
+
+  copyin(myproc()->pagetable, (char*)&pI, addr, sizeof(pI));
+
+  struct proc *p;
+  int aP = 0, sz = 0;
+  for(p = proc; p<&proc[NPROC]; p++)
+  {
+    acquire(&p->lock);
+    if(p->state == RUNNABLE || p->state == RUNNING)
+      aP++;
+    release(&p->lock);
+    sz += p->sz;
+  }
+
+  pI.activeProcess = aP;
+  pI.totalProcess = NPROC;
+  pI.memSize = sz;
+  pI.totalMemSize = PHYSTOP-KERNBASE;
+
+  copyout(myproc()->pagetable, addr, (char*)&pI, sizeof(pI));
+
+  return 0;
+}
\ No newline at end of file
diff --git a/user/load.c b/user/load.c
new file mode 100644
index 0000000..79fc891
--- /dev/null
+++ b/user/load.c
@@ -0,0 +1,69 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+struct procInfo {
+    int activeProcess;
+    int totalProcess;
+    int memSize;
+    int totalMemSize;
+};
+
+int
+main(int argc, char* argv[])
+{   
+    if(argc != 3)
+    {
+        printf("Usage: load <childCount> <allocationAmount>\n");
+        exit(1);
+    }
+
+    struct procInfo* pI = malloc(sizeof(struct procInfo)); 
+    int childCount = atoi(argv[1]);
+    int allocationAmount = atoi(argv[2]);
+
+    for(int i=0;i<childCount;i++)
+    {
+        int pid = fork();
+        if(pid == 0)
+        {
+            printf("Child is created\n");
+            if((uint64)sbrk(allocationAmount) == -1)
+            {
+                printf("allocation error\n");
+                exit(1);
+            }
+            sleep(2);
+            printf("Child allocated %d bytes\n", allocationAmount);
+            printf("Child going to sleep\n");
+            sleep(100);
+            if((uint64)sbrk(-allocationAmount) == -1)
+            {
+                printf("deallocation error\n");
+                exit(1);
+            }
+            exit(0);
+        }
+    }
+
+    // commenting out sleep captures processes
+    // uncommenting sleep captures memory
+    printf("Parent going to sleep\n");
+    sleep(1);
+    
+    info(pI);
+
+    for(int i=0;i<childCount;i++)
+    {
+        wait(0);
+    }
+
+    printf("Parent wake up\n");
+    printf("Current system information:\n");
+    printf("Processes: %d/%d\n", pI->activeProcess, pI->totalProcess);
+    printf("RAM: %d/%d\n", pI->memSize, pI->totalMemSize);
+
+    free(pI);
+
+    return 0;
+}
\ No newline at end of file
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..923d7ed
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..b03c38e 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct procInfo;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int info(struct procInfo*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..8af2b91 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("info");

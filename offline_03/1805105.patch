diff --git a/Makefile b/Makefile
index 62fd0f8..73f418a 100644
--- a/Makefile
+++ b/Makefile
@@ -124,6 +124,7 @@ mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.h
 
 UPROGS=\
 	$U/_cat\
+	$U/_dummyproc\
 	$U/_echo\
 	$U/_forktest\
 	$U/_grep\
@@ -135,6 +136,8 @@ UPROGS=\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_test_settickets\
+	$U/_testprocinfo\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
@@ -160,7 +163,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..11ae7f2 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -1,13 +1,17 @@
-#define NPROC        64  // maximum number of processes
-#define NCPU          8  // maximum number of CPUs
-#define NOFILE       16  // open files per process
-#define NFILE       100  // open files per system
-#define NINODE       50  // maximum number of active i-nodes
-#define NDEV         10  // maximum major device number
-#define ROOTDEV       1  // device number of file system root disk
-#define MAXARG       32  // max exec arguments
-#define MAXOPBLOCKS  10  // max # of blocks any FS op writes
-#define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
-#define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       2000  // size of file system in blocks
-#define MAXPATH      128   // maximum file path name
+#define NPROC           64  // maximum number of processes
+#define NCPU             8  // maximum number of CPUs
+#define NOFILE          16  // open files per process
+#define NFILE          100  // open files per system
+#define NINODE          50  // maximum number of active i-nodes
+#define NDEV            10  // maximum major device number
+#define ROOTDEV          1  // device number of file system root disk
+#define MAXARG          32  // max exec arguments
+#define MAXOPBLOCKS     10  // max # of blocks any FS op writes
+#define LOGSIZE         (MAXOPBLOCKS*3)  // max data blocks in on-disk log
+#define NBUF            (MAXOPBLOCKS*3)  // size of disk block cache
+#define FSSIZE          2000  // size of file system in blocks
+#define MAXPATH         128   // maximum file path name
+#define TIME_LIMIT_0    2     // queue_0(top queue-lottery scheduling) time limit
+#define TIME_LIMIT_1    4     // queue_1(bottom queue-RR scheduling) time limit
+#define WAIT_THRESH     6     // waiting threshold to avoid starvation
+#define DEFAULT_TICKETS 10    // default tickets per process for lottery scheduling
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..0bab5fd 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -6,6 +6,8 @@
 #include "proc.h"
 #include "defs.h"
 
+int print_logs = 0;
+
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
@@ -146,6 +148,17 @@ found:
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
 
+  // initialize field values 
+  p->inuse = 0;
+  p->inQ = 0; // new coming process in queue 0
+  p->waiting_time = 0;
+  p->running_time = 0;
+  p->times_scheduled = 0;
+  p->tickets_original = DEFAULT_TICKETS;
+  p->tickets_current = p->tickets_original;
+  p->queue_ticks[0] = 0;
+  p->queue_ticks[1] = 0;
+
   return p;
 }
 
@@ -169,6 +182,14 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->tickets_original = 0;
+  p->tickets_current = 0;
+  p->inuse = 0;
+  p->waiting_time = 0;
+  p->running_time = 0;
+  p->times_scheduled = 0;
+  p->queue_ticks[0] = 0;
+  p->queue_ticks[1] = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -320,6 +341,10 @@ fork(void)
 
   acquire(&np->lock);
   np->state = RUNNABLE;
+  // set child's number of tickets as equal to parent's number of tickets
+  np->tickets_original = p->tickets_original;
+  np->tickets_current = np->tickets_original;
+  // printf("fork: pid, childid, ptickets_o, ptickets_c, ctickets_o, ctickets_c: %d, %d, %d, %d, %d, %d\n", p->pid, np->pid, p->tickets_original, p->tickets_current, np->tickets_original, np->tickets_current);
   release(&np->lock);
 
   return pid;
@@ -441,38 +466,262 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
+// void
+// scheduler(void)
+// {
+//   struct proc *p;
+//   struct cpu *c = mycpu();
+
+//   c->proc = 0;
+//   for(;;){
+//     // The most recent process to run may have had interrupts
+//     // turned off; enable them to avoid a deadlock if all
+//     // processes are waiting.
+//     intr_on();
+
+//     for(p = proc; p < &proc[NPROC]; p++) {
+//       acquire(&p->lock);
+//       if(p->state == RUNNABLE) {
+//         // Switch to chosen process.  It is the process's job
+//         // to release its lock and then reacquire it
+//         // before jumping back to us.
+//         p->state = RUNNING;
+//         c->proc = p;
+//         swtch(&c->context, &p->context);
+
+//         // Process is done running for now.
+//         // It should have changed its p->state before coming back.
+//         c->proc = 0;
+//       }
+//       release(&p->lock);
+//     }
+//   }
+// }
+
+uint64 seed = 1805105;
+
 void
 scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
 
-  c->proc = 0;
+  c->proc = 0; // detaching current process from cpu
+
   for(;;){
     // The most recent process to run may have had interrupts
     // turned off; enable them to avoid a deadlock if all
     // processes are waiting.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
+    // sum of all current tickets for processe in queue0
+    int current_tickets_sum = 0;
+    for(p = proc; p < &proc[NPROC]; p++){
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+      if((p->state == RUNNABLE) && (p->inQ == 0)){
+        current_tickets_sum += p->tickets_current;
       }
       release(&p->lock);
     }
-  }
+
+    // if ALL processes have 0 current tickets, reinitialize current tickets with original tickets
+    if(current_tickets_sum == 0){
+      for(p = proc; p < &proc[NPROC]; p++){
+        acquire(&p->lock);
+        if((p->state == RUNNABLE) && (p->inQ == 0)){
+          p->tickets_current = p->tickets_original;
+          current_tickets_sum += p->tickets_current;
+        }
+        release(&p->lock);
+      }
+    }
+
+    // generate random int
+    do{
+      seed = (seed * 1103515245 + 12345) % 2147483648;
+    }while(seed == 0);
+    int random_int = seed % (current_tickets_sum + 1);
+
+    struct proc *chosen_proc = 0;
+    int running_current_tickets_sum = 0;
+    // find process to run using lottery scheduling
+    for(p = proc; p < &proc[NPROC]; p++){
+      acquire(&p->lock);
+      if((p->state == RUNNABLE) && (p->inQ == 0) && (p->tickets_current > 0)){
+        running_current_tickets_sum += p->tickets_current;
+        if(running_current_tickets_sum >= random_int){
+          chosen_proc = p;
+          release(&p->lock);
+          break;
+        }
+      }
+      release(&p->lock);
+    }
+
+    // check if a process exists that can be run using lottery scheduling
+    if(chosen_proc){
+      if(print_logs==1) printf("\tLOTTERY: Process %d won in queue 0 with tickets %d\n", chosen_proc->pid, chosen_proc->tickets_current);
+      chosen_proc->running_time++;
+      chosen_proc->times_scheduled++;
+      chosen_proc->tickets_current--;
+      chosen_proc->queue_ticks[0]++;
+
+      acquire(&chosen_proc->lock);
+      // Switch to chosen process.  It is the process's job
+      // to release its lock and then reacquire it
+      // before jumping back to us.
+      chosen_proc->state = RUNNING;
+      c->proc = chosen_proc;
+      swtch(&c->context, &chosen_proc->context);
+      // Process is done running for now.
+      // It should have changed its p->state before coming back.
+      c->proc = 0;
+
+      // demote if use cpu time fully(2 ticks)
+      if(chosen_proc->running_time >= TIME_LIMIT_0){
+        if(print_logs==1) printf("\tDEMO: Process %d ran for %d time ticks, demoted to queue 1\n", chosen_proc->pid, chosen_proc->running_time);
+        chosen_proc->inQ = 1;
+        chosen_proc->running_time = 0;
+      }
+      release(&chosen_proc->lock);
+    }else{
+      // no RUNNABLE process in queue0. so round robin for processes in queue1
+      for(p = proc; p< &proc[NPROC]; p++){
+        if((p->state == RUNNABLE) && (p->inQ == 1) && (p->running_time < TIME_LIMIT_1)){
+          p->running_time++;
+          p->times_scheduled++;
+          p->queue_ticks[1]++;
+
+          acquire(&p->lock);
+          // Switch to chosen process.  It is the process's job
+          // to release its lock and then reacquire it
+          // before jumping back to us.
+          p->state = RUNNING;
+          c->proc = p;
+          swtch(&c->context, &p->context);
+          // Process is done running for now.
+          // It should have changed its p->state before coming back.
+          c->proc = 0;
+
+          // if exhausted 4 ticks, initialize running time to 0
+          if(p->running_time >= TIME_LIMIT_1){
+            p->running_time = 0;
+          }
+          release(&p->lock);
+
+          chosen_proc = p;
+          break;
+        }
+      }
+    }
+
+    // aging mechanism
+    for(p = proc; p < &proc[NPROC]; p++){
+      acquire(&p->lock);
+      // increment wainting time
+      if(p->state == RUNNABLE){
+        p->inuse = 1;
+        if((p != chosen_proc) && (p->inQ == 1)){
+          p->waiting_time++;
+        }
+      }
+      // promote if in queue1 and waiting time >= threshold 
+      if((p->inQ == 1) && (p->waiting_time >= WAIT_THRESH)){
+        if(print_logs==1) printf("\tBOOST: Process %d waited for %d ticks, promoted to queue 0\n", p->pid, p->waiting_time);
+        p->inQ = 0;
+        p->waiting_time = 0;
+        p->running_time = 0;
+      }
+      release(&p->lock);
+    }
+  } 
 }
 
+// uint64 seed = 1805105;
+
+// void
+// scheduler(void)
+// {
+//   struct proc *p;
+//   struct cpu *c = mycpu();
+
+//   for(p = proc; p < &proc[NPROC]; p++) {
+//     acquire(&p->lock);
+//     if(p->state == RUNNABLE) {
+//       p->tickets_current = DEFAULT_TICKETS;
+//     }
+//     release(&p->lock);
+//   }
+
+//   c->proc = 0;
+//   printf("scheduler\n");
+
+//   for(;;){
+//     // The most recent process to run may have had interrupts
+//     // turned off; enable them to avoid a deadlock if all
+//     // processes are waiting.
+//     intr_on();
+
+//     // calculate sum of all current tickets
+//     int current_tickets_sum = 0;
+//     for(p = proc; p < &proc[NPROC]; p++){
+//       if(p->state == RUNNABLE){
+//         current_tickets_sum += p->tickets_current;
+//       }
+//     } 
+
+//     // if all processes have 0 tickets, reinitialize tickets
+//     if(current_tickets_sum == 0){
+//       for(p = proc; p < &proc[NPROC]; p++){
+//         if(p->state == RUNNABLE){
+//           p->tickets_current = p->tickets_original;
+//           current_tickets_sum += p->tickets_current;
+//         }
+//       }
+//     }
+
+//     // generate random int in (0, current_tickets_sum]
+//     // uint64 seed = 1805105;
+//     do{
+//       seed = (seed * 1103515245 + 12345) % 2147483648;
+//     }while(seed == 0);
+//     int random_int = seed % (current_tickets_sum + 1);
+
+//     // check for which process, the running sum exceeds random_int
+//     int running_tickets_sum = 0;
+//     for(p = proc; p < &proc[NPROC]; p++){
+//       acquire(&p->lock);
+//       if(p->state == RUNNABLE && p->tickets_current > 0){
+
+//         running_tickets_sum += p->tickets_current;
+//         if(running_tickets_sum < random_int){
+//           release(&p->lock);
+//           continue;
+//         }
+
+//         p->tickets_current--;
+//         p->running_time++;
+
+//         printf("p pid: %d\n", p->pid);
+//         // Switch to chosen process.  It is the process's job
+//         // to release its lock and then reacquire it
+//         // before jumping back to us.
+//         p->state = RUNNING;
+//         c->proc = p;
+//         swtch(&c->context, &p->context);
+
+//         // Process is done running for now.
+//         // It should have changed its p->state before coming back.
+//         c->proc = 0;
+
+//         release(&p->lock);
+//         break;
+//       }
+//       release(&p->lock);
+//     } 
+//   }
+// }
+
 // Switch to scheduler.  Must hold only p->lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -507,6 +756,15 @@ yield(void)
   struct proc *p = myproc();
   acquire(&p->lock);
   p->state = RUNNABLE;
+
+  // promote to queue0 if was in queue1
+  if(p->inQ == 1){
+    if(print_logs==1) printf("\tPROMO: Process %d ran for %d time ticks, promoted to queue 0\n", p->pid, p->running_time);
+    p->inQ = 0;
+    p->running_time = 0;
+    p->waiting_time = 0;
+  }
+
   sched();
   release(&p->lock);
 }
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..fa2c04d 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,13 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int tickets_original;        // number of tickets originally allocated for lottery scheduling
+  int tickets_current;         // number of current remaining tickets
+  int inuse;                   // RUNNING or RUNNABLE
+  int inQ;                     // which queue the process is currently in
+  int waiting_time;            // number of Ticks spent before process being scheduled
+  int running_time;            // number of Ticks spent before using up its allocated time slice
+  int times_scheduled;         // total number of times the process was scheduled by the CPU
+  uint queue_ticks[2];         // total number of Ticks the process has spent in each queue
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..763abfc
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,16 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+#include "types.h"
+struct pstat {
+    int pid[NPROC];               // the process ID of each process
+    int inuse[NPROC];             // whether this slot of the process table is being used (1 or 0)
+    int inQ[NPROC];               // which queue the process is currently in
+    int waiting_time[NPROC];      // the time each process has spent waiting before being scheduled
+    int running_time[NPROC];      // Number of times the process was scheduled before its time slice was used
+    int times_scheduled[NPROC];   // the total number of times this process was scheduled
+    int tickets_original[NPROC];  // the number of tickets each process originally had
+    int tickets_current[NPROC];   // the number of tickets each process currently has
+    uint queue_ticks[NPROC][2]; // the total number of ticks each process has spent in each queue
+};
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ce52e87 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..7926b7f 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..3fee0b9 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"
 
 uint64
 sys_exit(void)
@@ -91,3 +92,69 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// settickets
+uint64
+sys_settickets(void)
+{
+  int tickets;
+  argint(0, &tickets);
+
+  // delete
+  int ret_val = -1;
+
+  // cannot process negative values. if tickets<0 => tickets=0. why?
+  if(tickets <= 0){
+    myproc()->tickets_original = DEFAULT_TICKETS;
+    myproc()->tickets_current = DEFAULT_TICKETS;
+  }else{
+    myproc()->tickets_original = tickets;
+    myproc()->tickets_current = tickets;
+    ret_val = 0;
+  }
+  // printf("tickets: %d, setting tickets to %d for pid: %d\n", tickets, myproc()->tickets_original, myproc()->pid);
+  return ret_val;
+}
+
+// getpinfo
+extern struct proc proc[NPROC];
+uint64
+sys_getpinfo(void)
+{
+  printf("getpinfo\n");
+  
+  uint64 addr;
+  argaddr(0, &addr);
+
+  if(addr == 0){
+    return -1;
+  }
+
+  struct pstat ps;
+
+  copyin(myproc()->pagetable, (char*)&ps, addr, sizeof(struct pstat));
+
+  for(int i=0;i<NPROC;i++){
+    ps.pid[i] = proc[i].pid;
+
+    acquire(&proc[i].lock);
+    if(proc[i].state != UNUSED){
+      ps.inuse[i] = 1;
+    }else{
+      ps.inuse[i] = 0;
+    }
+    release(&proc[i].lock);
+
+    ps.inQ[i] = proc[i].inQ;
+    ps.waiting_time[i] = proc[i].waiting_time;
+    ps.running_time[i] = proc[i].running_time;
+    ps.times_scheduled[i] = proc[i].times_scheduled;
+    ps.tickets_original[i] = proc[i].tickets_original;
+    ps.tickets_current[i] = proc[i].tickets_current;
+    ps.queue_ticks[i][0] = proc[i].queue_ticks[0];
+    ps.queue_ticks[i][1] = proc[i].queue_ticks[1];
+  }
+
+  copyout(myproc()->pagetable, addr, (char*)&ps, sizeof(struct pstat));
+  return 0;
+}
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..f17376b
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,30 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[]){
+    if(argc != 3){
+        printf("Usage error: dummyproc ticket_count no_of_iterations\n");
+        return 0;
+    }
+
+    int tickets = atoi(argv[1]);
+    int iterations = atoi(argv[2]);
+
+    if(settickets(tickets) < 0){
+        printf("Failed to set tickets\n");
+        return 0;
+    }
+
+    printf("PARENT: Called with %d tickets, %d iters. Parent will exit now.\n", tickets, iterations);
+    int fork_id = fork();
+    if(fork_id == 0){
+        printf("CHILD: process %d with %d tickets started for %d loops\n", getpid(), tickets, iterations);
+        for(int i=0;i<iterations;i++){}
+    }else{
+        for(int i=0;i<iterations;i++){}
+        printf("PARENT: Parent with pid %d exited with status 0\n", getpid());
+        exit(0);
+    }
+    return 0;
+}
\ No newline at end of file
diff --git a/user/test_settickets.c b/user/test_settickets.c
new file mode 100644
index 0000000..e2300a4
--- /dev/null
+++ b/user/test_settickets.c
@@ -0,0 +1,21 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[]){
+    if(argc != 2){
+        printf("Usage: test_settickets ticket_no\n");
+        return 0;
+    }
+    int tickets = atoi(argv[1]);
+    if(settickets(tickets) == -1){
+        printf("settickets error!\n");
+        return 0;
+    }
+
+    while(1){
+
+    }
+    
+    return 0;
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..f536a6b
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,21 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+
+int main(int argc, char *argv[]){
+    struct pstat *p = malloc(sizeof(struct pstat));
+    if(getpinfo(p) == -1){
+        printf("getpinfo error!\n");
+        return 0;
+    }
+    printf("PID | In Use | In Q | Waiting time | Running time | # Times Scheduled | Original Tickets | Current Tickets | q0 | q1 \n");
+    for(int i=0; i<NPROC; i++){
+        if(p->inuse[i]){ 
+            printf("%d        %d       %d           %d              %d              %d                   %d                %d           %d    %d\n", p->pid[i], p->inuse[i], p->inQ[i], p->waiting_time[i], p->running_time[i], p->times_scheduled[i], p->tickets_original[i], p->tickets_current[i], p->queue_ticks[i][0], p->queue_ticks[i][1]);
+        }
+    }
+
+    free(p);
+    return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..b000040 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
